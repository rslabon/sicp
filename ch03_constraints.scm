(define (assert-equal a b)
  (if (not (eq? a b))
      (begin (display "error - not equal: ") (display "a=") (display a) (display " != ") (display " b=") (display b))))


(define (constant value connector)
  (define (me request)
    (display "Unknown request -- CONSTANT"))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (inform-about-value constraint)
  (constraint 'I-have-a-value))

(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

(define (for-each-except exception procedure list)
  (define (loop list)
    (cond ((null? list) 'done)
          ((eq? (car list) exception) (loop (cdr list)))
          (else (procedure (car list)) (loop (cdr list)))))
  (loop list))

(define (make-connector)
  (let ((value #f) (informant #f) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not value)
             (set! value newval)
             (set! informant setter)
             (for-each-except setter inform-about-value constraints))
            ((not (= value newval))
             (display "Contradiction"))
            (else 'ignored)))
    (define (forgot-my-value retractor)
      (if (eq? retractor informant)
          (begin (set! informant #f)
                 (for-each-except retractor inform-about-no-value constraints))
          'ignored))
      (define (connect new-constraint)
        (if (not (memq new-constraint constraints))
            (set! constraints (cons new-constraint constraints)))
        (if value
            (inform-about-value new-constraint))
        'done)
      (define (me request)
        (cond ((eq? request 'has-value?)
               (if informant #t #f))
              ((eq? request 'value) value)
              ((eq? request 'set-value!) set-my-value)
              ((eq? request 'forget) forgot-my-value)
              ((eq? request 'connect) connect)
              (else (display "UNKNOWN OPERATION -- CONNECTOR"))))
      me))

(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- PROBE" request))))
  (connect connector me)
  me)

(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget) retractor))
(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sum
                       (+ (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sum))
           (set-value! a2
                       (- (get-value sum) (get-value a1))
                       me))
          ((and (has-value? a2) (has-value? sum))
           (set-value! a1
                       (- (get-value sum) (get-value a2))
                       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)  
           (process-new-value))
          ((eq? request 'I-lost-my-value) 
           (process-forget-value))
          (else 
           (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
               (and (has-value? m2) (= (get-value m2) 0)))
           (set-value! product 0 me))
          ((and (has-value? m1) (has-value? m2))
           (set-value! product
                       (* (get-value m1) (get-value m2))
                       me))
          ((and (has-value? product) (has-value? m1))
           (set-value! m2
                       (/ (get-value product) (get-value m1))
                       me))
          ((and (has-value? product) (has-value? m2))
           (set-value! m1
                       (/ (get-value product) (get-value m2))
                       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (celsius-fahrenheit-converter c f)
  (let ((u (make-connector))
        (v (make-connector))
        (w (make-connector))
        (x (make-connector))
        (y (make-connector)))
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)
    (constant 9 w)
    (constant 5 x)
    (constant 32 y)
    'ok))


(define C (make-connector))
(probe "Celsius temp" C)
(define F (make-connector))
(probe "Fahrenheit temp" F)
(celsius-fahrenheit-converter C F)
;(set-value! C 100 'user)
;(set-value! F 100 'user)

;ex 3.33
(define (averager a b c)
  (let ((u (make-connector))
        (v (make-connector)))
    (adder a b u)
    (multiplier c v u)
    (constant 2 v)
    'ok))

(define A (make-connector))
(probe "A" A)
(define B (make-connector))
(probe "B" B)
(define C (make-connector))
(probe "C" C)
;(averager A B C)
;(set-value! A 1 'user)
;(set-value! B 2 'user)

;ex 3.34
;(define (squarer a b)
;  (multiplier a a b))

;(squarer A B)
;(set-value! A 5 'user)
;(set-value! B 25 'user)

;ex 3.35
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
            (error "square less than 0 -- SQUARER" (get-value b))
            (set-value! a (sqrt (get-value b)) me))
        (set-value! b (expt (get-value a) 2) me)))
  (define (process-forget-value) 
    (forget-value! a me)
    (forget-value! b me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
           (display "Unknown request -- SQUARER"))))
  (connect a me)
  (connect b me)
  me)

;(squarer A B)
;(set-value! A 5 'user)
;(set-value! B 25 'user)

;ex 3.37
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define A (make-connector))
(probe "A" A)
(define B (make-connector))
(probe "B" B)
(set-value! A 5 'user)
(set-value! B 7 'user)
(assert-equal (get-value (c+ A B)) 12)

(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

(define A (make-connector))
(probe "A" A)
(define B (make-connector))
(probe "B" B)
(set-value! A 5 'user)
(set-value! B 7 'user)
(assert-equal (get-value (c* A B)) 35)

(define (cv x)
  (let ((z (make-connector)))
    (constant x z)
    z))
(assert-equal (get-value (cv 18)) 18)  

(define (c/ x y)
  (let ((z (make-connector)))
    (multiplier z y x)
    z))

(define A (make-connector))
(probe "A" A)
(define B (make-connector))
(probe "B" B)
(set-value! A 12 'user)
(set-value! B 3 'user)
(assert-equal (get-value (c/ A B)) 4) 

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))
(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
(probe "C" C)
(probe "F" F)
(set-value! F 212 'user)